# aws cloudformation create-stack --stack-name litellm --template-body file://LiteLLM_ecs.yaml --capabilities CAPABILITY_NAMED_IAM

AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy an LiteLLM proxy service on AWS Fargate

Parameters:
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CidrBlock:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CidrBlock:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1CidrBlock:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2CidrBlock:
    Type: String
    Default: 10.0.3.0/24
  InitImage:
    Type: String
    Description: Init Container Image # init image for ecs task to mount proxy configuration file, please do not modify
    Default: public.ecr.aws/i4x4j7g8/956045422469-oregon:litellm-ecs-configmap
  ProxyFileS3Bucket:
    Type: String
    Description: Init container proxy configuration file located bucket
    Default: test-chenxqdu-s3-oregon
  ProxyFilePath:
    Type: String
    Description: Init container proxy configuration file located path
    Default: litellm/proxy_config.yaml


Resources:

  # SSM Parameters
  RedisEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['/', ['', !Sub '${AWS::StackName}', 'RedisEndpoint']]
      Type: String
      Value: !GetAtt LiteLLMRedis.RedisEndpoint.Address

  DBUser:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['/', ['', !Sub '${AWS::StackName}', 'DBUser']]
      Type: String
      Value: litellmAdmin

  DBPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['/', ['', !Sub '${AWS::StackName}', 'DBPassword']]
      Type: String
      Value: litellmPassword

  DBName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['/', ['', !Sub '${AWS::StackName}', 'DBName']]
      Type: String
      Value: litellmdb

  DBEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['/', ['', !Sub '${AWS::StackName}', 'DBEndpoint']]
      Type: String
      Value: !GetAtt LiteLLMDB.Endpoint.Address

  # 创建 VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  # 创建互联网网关
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # 附加互联网网关到 VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # 创建 NAT 网关
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # 为 NAT 网关分配一个弹性 IP
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # 创建公有子网 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: true

  # 创建公有子网 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CidrBlock
      MapPublicIpOnLaunch: true

  # 创建私有子网 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      MapPublicIpOnLaunch: false

  # 创建私有子网 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      MapPublicIpOnLaunch: false

  # 创建公有路由表
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # 创建默认路由到互联网网关
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # 将公有子网 1 关联到公有路由表
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # 将公有子网 2 关联到公有路由表
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # 创建私有路由表
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # 创建默认路由到 NAT 网关
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # 将私有子网 1 关联到私有路由表
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  # 将私有子网 2 关联到私有路由表
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # 创建安全组
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      # add port 4000 for vpc
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: !Ref VPCCidrBlock
      VpcId: !Ref VPC

  # DBSecurityGroup
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Allow DB Connection traffic in vpc
      DBSecurityGroupIngress:
        - CIDRIP: !Ref VPCCidrBlock
      EC2VpcId: !Ref VPC
  
  # DBSubnetGroup
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # CacheSecurityGroup
  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !Ref VPCCidrBlock
      VpcId: !Ref VPC

  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  ## PG DB for spend track
  LiteLLMDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      Engine: postgres
      MasterUsername: !GetAtt DBUser.Value
      MasterUserPassword: !GetAtt DBPassword.Value
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBName: !GetAtt DBName.Value
      BackupRetentionPeriod: 0
      DBSecurityGroups:
        - !Ref DBSecurityGroup

  ## Redis for router
  LiteLLMRedis:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t4g.micro
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref CacheSecurityGroup

  # 创建 ECS 集群
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Sub '${AWS::StackName}', 'ecs-stack']] 

  
  ###################
  ## CW Resources ###
  ###################
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [!Sub '${AWS::StackName}', 'loggroup']]
      RetentionInDays: 7

  ###################
  ## IAM Resources ##
  ###################
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /

  S3Policies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 's3access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${ProxyFileS3Bucket}'
              - !Sub 'arn:${AWS::Partition}:s3:::${ProxyFileS3Bucket}/*'
      Roles:
        - Ref: 'EcsTaskRole'

  # 创建 ECS 任务定义
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: 
      - LiteLLMDB
      - LiteLLMRedis
    Properties:
      Family: !Join ['-', [!Sub '${AWS::StackName}', 'ecs-task']]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: 'init'
          Image: !Ref InitImage
          Essential: false
          Environment:
            - Name: 'S3_BUCKET_FILE_1'
              Value: !Ref ProxyFileS3Bucket
            - Name: 'SRC_FILE_PATH_FILE_1'
              Value: !Ref ProxyFilePath
            - Name: 'DEST_FILE_PATH_FILE_1'
              Value: '/app/proxy_config.yaml'
          MountPoints:
            - ContainerPath: '/app'
              SourceVolume: 'staticontent'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'init'
        - Name: litellm-proxy
          Image: ghcr.io/berriai/litellm:main-stable
          DependsOn:
            - ContainerName: init
              Condition: SUCCESS
          Essential: true
          Environment:
              - Name: HOST
                Value: 0.0.0.0
              - Name: DATABASE_URL
                Value: !Join ['',['postgresql://', !GetAtt DBUser.Value ,':', !GetAtt DBPassword.Value, '@',!GetAtt DBEndpoint.Value,':5432/', !GetAtt DBName.Value]]
              - Name: REDIS_HOST
                Value: !GetAtt LiteLLMRedis.RedisEndpoint.Address
              - Name: REDIS_PORT
                Value: 6379
          #   - Name: AWS_REGION_NAME
          #     Value: !Ref 'AWS::Region'
          #   - Name: AWS_ACCESS_KEY_ID
          #     Value: !Ref AccessKeyId
          #   - Name: AWS_SECRET_ACCESS_KEY
          #     Value: !Ref SecretAccessKey 
          EntryPoint:  # 添加 EntryPoint 以指定容器启动命令和参数
            - "litellm"
            - "--detailed_debug"
            - "--config"
            - "/app/proxy_config.yaml"
          PortMappings:
            - ContainerPort: 4000
          MountPoints:
            - ContainerPath: '/app'
              ReadOnly: true
              SourceVolume: 'staticontent'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: litellm-proxy
      Volumes:
        - Name: 'staticontent'

  # 创建 ECS 服务
  Service:
    Type: AWS::ECS::Service
    DependsOn: 
      - Listener
      - LiteLLMDB
      - LiteLLMRedis
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: litellm-proxy
          ContainerPort: 4000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100

  # 创建目标组
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 4000
      TargetType: ip

  # 创建 NLB
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # 创建监听器
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # 配置自动扩缩
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt Service.Name]]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: litellm-proxy-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: litellm-proxy-scaling-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

Outputs:
  LoadBalancerDNS:
    Description: The DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName

